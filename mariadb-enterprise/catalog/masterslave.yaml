# Copyright (C) 2018, MariaDB Corporation
#
# Defines a master/slave configuration in a StatefulSet behind
# a headless service. Allows scaling the number of server instances
# by using:
# kubectl scale sts <label>-mdb-ms --replicas=<number of server instances>

# Headless service for stable DNS entries for StatefulSet members
{{ tpl (.Files.Get "snippets/external-service.yaml") . }}
---
# a StatefulSet for the master/slave cluster
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mdb-ms
  labels:
{{ tpl (.Files.Get "snippets/labels.yaml") . | indent 4 }}
    server.mariadb: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      server.mariadb: {{ .Release.Name }}
  serviceName: {{ .Release.Name }}-mdb-clust
  replicas: {{ .Values.mariadb.server.replicas }}
  template:
    metadata:
      labels:
{{ tpl (.Files.Get "snippets/labels.yaml") . | indent 8 }}
        server.mariadb: {{ .Release.Name }}
{{ tpl (.Files.Get "snippets/annotations.yaml") . | indent 6 }}
    spec:
      initContainers:
{{ tpl (.Files.Get "snippets/nfs-delay.yaml") . | indent 6 }}

      # runs a state store client to determine the IP of the active master
      - name: init-get-master
        image: {{ .Values.mariadb.statestore.image }}
        command: ["/bin/sh"]
        args: ["-c", "cd /root; node ./client.js mariadb-init {{ .Release.Name }}-mdb-state /mnt/config-map"]
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: mariadb-config-vol
            mountPath: /mnt/config-map
          - name: mariadb-configtemplate-vol
            mountPath: /mnt/config-template

      # runs an initialization script to prepare the correct startup configuration
      - name: init-masterslave
        image: {{ .Values.mariadb.server.image }}
        command:
          - bash
          - /mnt/config-template/init-configurations.sh
          - masterslave
        env:
        - name: RESTORE_FROM_FOLDER
          value: {{ .Values.mariadb.server.restore.restoreFrom }}
        - name: CLUSTER_TOPOLOGY
          value: {{ .Values.mariadb.cluster.topology }}
        volumeMounts:
          - name: mariadb-secrets-vol
            mountPath: /mnt/secrets
            readOnly: true
          - name: mariadb-entrypoint-vol
            mountPath: /docker-entrypoint-initdb.d
          - name: mariadb-configtemplate-vol
            mountPath: /mnt/config-template
          - name: mariadb-config-vol
            mountPath: /mnt/config-map

      containers:
      - name: mariadb-server
        image: {{ .Values.mariadb.server.image }}
        command:
        # start a mariadb instance
        - bash
        - /mnt/config-map/start-mariadb-instance.sh
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "Y"
        - name: RESTORE_FROM_FOLDER
          value: {{ .Values.mariadb.server.restore.restoreFrom }}
        - name: CLUSTER_TOPOLOGY
          value: {{ .Values.mariadb.cluster.topology }}
        ports:
        - containerPort: 3306
{{ tpl (.Files.Get "snippets/resources") . | indent 8 }}
        volumeMounts:
        - name: backup-data-storage
          mountPath: /backup-storage
        - name: mariadb-entrypoint-vol
          mountPath: /docker-entrypoint-initdb.d
        - name: mariadb-config-vol
          mountPath: /mnt/config-map
        # a permanent volume for data storage
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: mariadb-socket-vol
          mountPath: /var/run/mysqld
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1

      # runs a state store client to ensure the state is being maitained
      - name: state
        image: {{ .Values.mariadb.statestore.image }}
        command: ["/bin/sh"]
        args: ["-c", "cd /root; node ./client.js mariadb {{ .Release.Name }}-mdb-state /mnt/config-map"]
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: mariadb-configtemplate-vol
            mountPath: /mnt/config-template

{{ tpl (.Files.Get "snippets/backup.yaml") . | indent 6 }}

      restartPolicy: Always

{{ tpl (.Files.Get "snippets/volumes.yaml") . | indent 6 }}

{{ tpl (.Files.Get "snippets/volumeClaimTemplates.yaml") . | indent 2 }}
