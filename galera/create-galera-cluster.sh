#!/bin/bash
# (C) 2018 MariaDB Corporation
# Creates a templatized galera cluster fronted by MaxScale in Kubernetes
# User-defined parameters are "application" and "environment"

function print_usage() {
    echo "Usage: "
    echo "create-galera-cluster.sh -a=<application> -e=<environment> [<options>]"
    echo ""
    echo "Supported options: "
    echo "         -u <database user>, default: mariadb-admin"
    echo "         -p <database password>, default: autogenerated"
    echo "         --repl-user <replication user>, default: repl"
    echo "         --repl-password <replication password>, default: autogenerated"
    echo "         --dry-run generate yaml definitions only"
    echo "         --clean delete persistent volumes"
    echo "         -h print this screen"
    exit 1
}

function parse_options() {
    APP=""
    ENV=""
    DBUSER="admin"
    DBPWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
    REPLUSER="repl"
    REPLPWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
    DRY_RUN=""
    CLEAN=""
    
    while [[ $# -gt 0 ]]
    do
    
    key="$1"
    case $key in
        (-a|--app)
        APP="$2"
        shift
        shift
        ;;
        (-e|--env)
        ENV="$2"
        shift
        shift
        ;;
        (-u|--db-user)
        DBUSER="$2"
        shift
        shift
        ;;
        (-p|--db-pass)
        DBPWD="$2"
        shift
        shift
        ;;
        (--dry-run)
        DRY_RUN="--dry-run -o yaml"
        shift
        ;;
        (--clean)
        CLEAN="true"
        shift
        ;;
        (-h|*)
        print_usage
        ;;
    esac
    done

    if [[ -z "$APP" ]]; then
       print_usage
    fi

    if [[ -z "$ENV" ]]; then
       print_usage
    fi
}

function expand_templates() {
    # copy template files to a temp directory
    TEMPDIR=$(mktemp -d)
    cp -r "$DIR/templates" "$TEMPDIR"

    for filename in $TEMPDIR/templates/*.yaml; do
        sed -i -e "s/{{APPLICATION}}/$APP/g" \
	    -e "s/{{ENVIRONMENT}}/$ENV/g" \
            -e "s/{{ADMIN_USERNAME}}/$(echo -n $DBUSER | base64)/g" \
            -e "s/{{ADMIN_PASSWORD}}/$(echo -n $DBPWD | base64)/g" \
            -e "s/{{REPLICATION_USERNAME}}/$(echo -n $REPLUSER | base64)/g" \
            -e "s/{{REPLICATION_PASSWORD}}/$(echo -n $REPLPWD | base64)/g" \
            $filename
    done
    
    TEMPLATE="$TEMPDIR/templates"
}

parse_options "$@"

# get directory of script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
KUBECTL=kubectl

expand_templates

if [ "$DRY_RUN" == "" ]; then
   $KUBECTL delete configmap mariadb-galera-config 2> /dev/null
   $KUBECTL delete secrets $APP-$ENV-mariadb-secret 2> /dev/null
   $KUBECTL delete -f "$TEMPLATE"/galera.yaml 2> /dev/null
   $KUBECTL delete -f "$TEMPLATE"/maxscale.yaml 2> /dev/null
#    $KUBECTL delete -f "$TEMPLATE"/prometheus.yaml 2> /dev/null
    if [ "$CLEAN" == "true" ]; then
        $KUBECTL delete persistentvolumeclaims mariadb-galera-data-vol-test-test-galera-0 2> /dev/null
        $KUBECTL delete persistentvolumeclaims mariadb-galera-data-vol-test-test-galera-1 2> /dev/null
        $KUBECTL delete persistentvolumeclaims mariadb-galera-data-vol-test-test-galera-2 2> /dev/null
        $KUBECTL delete persistentvolumeclaims mariadb-galera-log-vol-test-test-galera-0 2> /dev/null
        $KUBECTL delete persistentvolumeclaims mariadb-galera-log-vol-test-test-galera-1 2> /dev/null
        $KUBECTL delete persistentvolumeclaims mariadb-galera-log-vol-test-test-galera-2 2> /dev/null
    fi
fi

set -e
# create configmaps for the configurations of the two types of service
$KUBECTL create configmap mariadb-galera-config --from-file="$TEMPLATE"/config/ $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# create the secret that holds user names and passwords
$KUBECTL create -f "$TEMPLATE"/mariadb-secret.yaml $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# create the galera cluster as a stateful set (including service definitions)
$KUBECTL create -f "$TEMPLATE"/galera.yaml $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# all mariadb servers are available, create maxscale instance
$KUBECTL create -f "$TEMPLATE"/maxscale.yaml $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# start prometheus
# $KUBECTL create -f "$TEMPLATE"/prometheus.yaml $DRY_RUN
# if [ "$DRY_RUN" != "" ]; then
#    echo "---"
# fi

# cleanup temporary files
rm -R -f "$TEMPDIR"
# done
